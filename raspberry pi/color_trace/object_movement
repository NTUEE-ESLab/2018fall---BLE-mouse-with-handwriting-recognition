# import the necessary packages
from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import cv2
import os
from collections import deque
import numpy as np
import argparse
import imutils
import socket
import threading
from imutils.video import VideoStream
from pytesseract import *
from PIL import Image

greenLower = (29, 86, 6)
greenUpper = (64, 255, 255)

pts = deque((0,0)*32,maxlen=32)
counter = 0
(dX, dY) = (0, 0)
direction = ""
write_enable = False
write_finished = False
data_int = 0

def getSig():
    while True:
        global data_int
        if write_enable == 1:
            print("in")
            data, addr = sock.recvfrom(1)
            data_int = int.from_bytes(data, byteorder = 'big')
            print(data_int)
            
UDP_IP = "127.0.0.1"
UDP_PORT = 8999 
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.setblocking(1)
t = threading.Thread(target = getSig)
t.start()

while True:
    data, addr = sock.recvfrom(1)
    data_int = int.from_bytes(data, byteorder = 'big')
    if data_int == 1:
        write_enable = 1
    if write_enable == 1:           
        camera = PiCamera()
        camera.resolution = (640, 480)
        camera.framerate = 32
        rawCapture = PiRGBArray(camera, size=(640, 480))

        time.sleep(0.1)

        for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
            image = frame.array
            
            image = imutils.resize(image, width=600)
            blurred = cv2.GaussianBlur(image, (11, 11), 0)
            hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)

            mask = cv2.inRange(hsv, greenLower, greenUpper)
            mask = cv2.erode(mask, None, iterations=2)
            mask = cv2.dilate(mask, None, iterations=2)

            cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                cv2.CHAIN_APPROX_SIMPLE)
            cnts = imutils.grab_contours(cnts)
            center = None

            if len(cnts) > 0:
                c = max(cnts, key=cv2.contourArea)
                ((x, y), radius) = cv2.minEnclosingCircle(c)
                M = cv2.moments(c)
                center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))

                if radius > 10:
                    cv2.circle(image, (int(x), int(y)), int(radius),
                        (0, 255, 255), 2)
                    cv2.circle(image, center, 5, (0, 0, 255), -1)
                    pts.appendleft(center)

            for i in np.arange(1, len(pts)):
                if pts[i - 1] == 0 or pts[i] == 0:
                    continue

                if counter >= 10 and i == 1 and pts[-10] != 0:
                    dX = pts[-10][0] - pts[i][0]
                    dY = pts[-10][1] - pts[i][1]
                    (dirX, dirY) = ("", "")

                    if np.abs(dX) > 20:
                        dirX = "East" if np.sign(dX) == 1 else "West"

                    if np.abs(dY) > 20:
                        dirY = "North" if np.sign(dY) == 1 else "South"

                    if dirX != "" and dirY != "":
                        direction = "{}-{}".format(dirY, dirX)

                    else:
                        direction = dirX if dirX != "" else dirY

                thickness = int(np.sqrt(32/ float(i + 1)) * 2.5)
                cv2.line(image, tuple(pts[i - 1]), tuple(pts[i]), (0, 0, 255), thickness)

            cv2.putText(image, direction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                0.65, (0, 0, 255), 3)
            cv2.putText(image, "dx: {}, dy: {}".format(dX, dY),
                (10, image.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX,
                0.35, (0, 0, 255), 1)

            cv2.imshow("Frame", image)
            key = cv2.waitKey(1) & 0xFF
            counter += 1
         
            rawCapture.truncate(0)
            print(data_int)
            if data_int == 0:
                print("innnnn")
                write_enable = 0
                track_image = np.zeros((480,640,3))
                track_image[:] = (255,255,255)
                for i in np.arange(1, len(pts)):
                    cv2.line(track_image, tuple(pts[i - 1]), tuple(pts[i]), (0, 0, 0), 10)
                flip = cv2.flip(track_image, 1)
                cv2.imwrite('track.jpg',flip)
                img = cv2.imread('track.jpg')
                config = ("-l handwritten --oem 1 --psm 10")
                word = image_to_string(img,config = config)
                print(word)
                dev = os.open("/sys/devices/platform/virmouse/vmevent",os.O_RDWR)
                if word == "A":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([30])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "B":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([48])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "C":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([46])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "D":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([32])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "E":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([18])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "F":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([33])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "G":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([34])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "H":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([35])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "I":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([23])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "J":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([36])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "K":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([37])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "L":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([38])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "M":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([50])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "N":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([49])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "O":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([24])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "P":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([25])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "Q":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([16])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "R":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([19])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "S":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([31])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "T":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([20])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "U":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([22])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "V":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([47])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "W":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([17])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "X":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([45])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "Y":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([21])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                elif word == "Z":
                    data = bytes([11])+bytes([0])+bytes([0])+bytes([0])+bytes([44])+bytes([0])+bytes([0])+bytes([0])
                    os.write(dev,data)
                #write_enable = 0
                #write_finished = 0
                break
                
